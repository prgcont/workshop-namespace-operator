/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/prgcont/workshop-namespace-operator/pkg/apis/operator/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkshopNamespaceLister helps list WorkshopNamespaces.
type WorkshopNamespaceLister interface {
	// List lists all WorkshopNamespaces in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.WorkshopNamespace, err error)
	// WorkshopNamespaces returns an object that can list and get WorkshopNamespaces.
	WorkshopNamespaces(namespace string) WorkshopNamespaceNamespaceLister
	WorkshopNamespaceListerExpansion
}

// workshopNamespaceLister implements the WorkshopNamespaceLister interface.
type workshopNamespaceLister struct {
	indexer cache.Indexer
}

// NewWorkshopNamespaceLister returns a new WorkshopNamespaceLister.
func NewWorkshopNamespaceLister(indexer cache.Indexer) WorkshopNamespaceLister {
	return &workshopNamespaceLister{indexer: indexer}
}

// List lists all WorkshopNamespaces in the indexer.
func (s *workshopNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkshopNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkshopNamespace))
	})
	return ret, err
}

// WorkshopNamespaces returns an object that can list and get WorkshopNamespaces.
func (s *workshopNamespaceLister) WorkshopNamespaces(namespace string) WorkshopNamespaceNamespaceLister {
	return workshopNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkshopNamespaceNamespaceLister helps list and get WorkshopNamespaces.
type WorkshopNamespaceNamespaceLister interface {
	// List lists all WorkshopNamespaces in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.WorkshopNamespace, err error)
	// Get retrieves the WorkshopNamespace from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.WorkshopNamespace, error)
	WorkshopNamespaceNamespaceListerExpansion
}

// workshopNamespaceNamespaceLister implements the WorkshopNamespaceNamespaceLister
// interface.
type workshopNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkshopNamespaces in the indexer for a given namespace.
func (s workshopNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkshopNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkshopNamespace))
	})
	return ret, err
}

// Get retrieves the WorkshopNamespace from the indexer for a given namespace and name.
func (s workshopNamespaceNamespaceLister) Get(name string) (*v1alpha1.WorkshopNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workshopnamespace"), name)
	}
	return obj.(*v1alpha1.WorkshopNamespace), nil
}
